# -*- coding: utf-8 -*-
"""Milestone Project 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DYh7MuZfm2gX1PD_24WqRgYXgwhR0RXi

# Predicting heart disease using machine learning
Our approach uses the following steps
1. Problem definition
2. Data
3. Evaluation
4. Features
6. Modelling
7. Experimentation

`isnull`
"""





"""1. Preparing the *tools*"""

# Commented out IPython magic to ensure Python compatibility.
# We import all the tools that we need
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline  
#So that the graphs appear inside our notbook

#We import models from Sklearn
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier

#we import model evaluations
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import plot_roc_curve

"""2. Load the data"""

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded ["heart.csv"]))
df

#We may start by comparing the sex attribute with the target attribute
pd.crosstab(df.target, df.sex)

#We plot this data
pd.crosstab (df.target, df.sex).plot (kind = "bar",
                                      figsize = (10,6),
                                      color = ["salmon", "lightblue"]);

"""Correlation Matrix and Its visualization of our dataset



"""

df.corr()

corr_matrix = df.corr()
fig, ax = plt.subplots (figsize = (15, 10))
ax = sns.heatmap (corr_matrix,
                  annot = True,
                  linewidths = 0.5,
                  fmt = ".2f",
                  cmap = "YlGnBu")



"""## Modelling: Scikit-Learn"""

#split the data into X and y
np.random.seed (43)
X = df.drop ("target", axis=1)
y = df["target"]
X_train, X_test, y_train, y_test = train_test_split (X, y,test_size = 0.2)
model = RandomForestClassifier()
model.fit (X_train, y_train)
model.score(X_test, y_test)

"""** The Models that we want to use are:**
1. Logistic Regression
2. KNearestNeighbor Classifier
3. RandomForest Classifier

"""

#We place our models into a dictionary
models = {"Logistic Regression": LogisticRegression(),
          "KNN": KNeighborsClassifier(),
          "Random Forest": RandomForestClassifier()}

#Create a function to fit and score the models
def fit_and_score (models, X_train, X_test, y_train, y_test):
  """
  Fits and evaluates given machine learning models
  """

#Set the random seed
  np.random.seed (43)

#Make a dictionary to keep the model scores
  model_scores = {}

#Loop through the models
  for name, model in models.items ():
    model.fit (X_train, y_train)
    model_scores [name] = model.score (X_test, y_test)
    return model_scores

model_scores = fit_and_score (models,
                               X_train,
                               X_test,
                               y_train,
                               y_test
                               );



"""Tuning and improving our nodel


*   Hyperparameter Tuning
*   Recall
* Precision
* F1 Score
* Confusion Matrix
* Classification report
* ROC Curve
* Area under the curve



"""

models_scores